# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V-OFbNMspRPF_R0wRVI7h2Rgz4hty0jF
"""

pip install gradio transformers

import gradio as gr
from transformers import pipeline

# Dummy model setup (replace this with your own job-listing GPT model setup)
model = pipeline("text-generation", model="gpt2")

# Function to process user query
def generate_response(query, workspace, model_name, file=None):
    response = model(query, max_length=100, num_return_sequences=1)[0]["generated_text"]
    return f"Workspace: {workspace}\nModel: {model_name}\n\nResponse: {response}"

# Gradio interface
with gr.Blocks() as demo:
    gr.Markdown("# Therapy Assistant GPT")

    with gr.Row():
        model_dropdown = gr.Dropdown(["GPT-3.5", "Llama-2", "CustomGPT"], label="Choose an AI Model")
        workspace_dropdown = gr.Dropdown(["Default", "New Workspace"], label="Select Workspace")
        workspace_text = gr.Textbox(label="Create New Workspace (Optional)")

    # Corrected type parameter
    document_upload = gr.File(label="Upload a document (optional):", type="filepath")

    query_input = gr.Textbox(label="Enter your query", placeholder="Type your query here...")
    response_output = gr.Textbox(label="Generated Response", placeholder="Response will appear here...")

    generate_button = gr.Button("Generate Response")
    generate_button.click(
        generate_response,
        inputs=[query_input, workspace_dropdown, model_dropdown, document_upload],
        outputs=response_output,
    )

# Launch the Gradio app
demo.launch()

import gradio as gr
from transformers import pipeline

# Dummy model setup (replace this with your custom GPT logic)
model = pipeline("text-generation", model="gpt2")

# Function to process the query
def generate_response(query, workspace, model_name, file):
    if file:
        file_content = file.name
    else:
        file_content = "No file uploaded."

    response = model(query, max_length=100, num_return_sequences=1)[0]["generated_text"]
    return f"Workspace: {workspace}\nModel: {model_name}\nUploaded File: {file_content}\n\nResponse: {response}"

# Gradio app layout
with gr.Blocks(theme=gr.themes.Monochrome(primary_hue="purple")) as demo:
    gr.Markdown("<h1 style='color:purple;'>Therapy Assistant GPT</h1>")
    gr.Markdown("This is a custom assistant tool for generating responses. You can choose models, upload files, and manage workspaces.")

    with gr.Row():
        model_dropdown = gr.Dropdown(
            ["GPT-3.5", "Llama-2", "CustomGPT"], label="Choose AI Model", interactive=True
        )
        workspace_dropdown = gr.Dropdown(
            ["Default", "Workspace 1", "Workspace 2"], label="Select Workspace", interactive=True
        )
        workspace_input = gr.Textbox(label="Create New Workspace (Optional)", placeholder="Enter new workspace name")

    file_upload = gr.File(label="Upload a document (optional):", type="filepath")
    query_input = gr.Textbox(label="Enter your query", placeholder="Type your query here...")
    generate_button = gr.Button("Generate Response", variant="primary")
    response_output = gr.Textbox(label="Generated Response")

    generate_button.click(
        generate_response,
        inputs=[query_input, workspace_dropdown, model_dropdown, file_upload],
        outputs=response_output,
    )

    gr.Markdown("<p style='text-align:center;color:purple;'>Created with ‚ù§Ô∏è using Gradio</p>")

# Launch the Gradio app
demo.launch(share=True)

import gradio as gr
from transformers import pipeline

# Dummy model setup (replace this with your custom job listing GPT model logic)
model = pipeline("text-generation", model="gpt2")

# Function to process job-related queries
def generate_job_listing(query, workspace, model_name, file):
    if file:
        file_content = file.name  # File name as a placeholder (you can add file processing logic here)
    else:
        file_content = "No file uploaded."

    # Generate response using the model (replace with your custom logic)
    response = model(query, max_length=100, num_return_sequences=1)[0]["generated_text"]
    return f"Workspace: {workspace}\nModel: {model_name}\nUploaded File: {file_content}\n\nResponse: {response}"

# Gradio app layout
with gr.Blocks(theme=gr.themes.Monochrome(primary_hue="purple")) as demo:
    gr.Markdown("<h1 style='color:purple;'>Job Listing Assistant GPT</h1>")
    gr.Markdown("This tool helps generate job listings and provide insights for employers and job seekers.")

    with gr.Row():
        model_dropdown = gr.Dropdown(
            ["Job-GPT-1", "Llama-2", "CustomGPT"], label="Choose AI Model", interactive=True
        )
        workspace_dropdown = gr.Dropdown(
            ["Default", "Tech Jobs", "Healthcare Jobs"], label="Select Workspace", interactive=True
        )
        workspace_input = gr.Textbox(label="Create New Workspace (Optional)", placeholder="Enter new workspace name")

    file_upload = gr.File(label="Upload Job Description (optional):", type="filepath")
    query_input = gr.Textbox(label="Enter Job Query", placeholder="E.g., 'List top 5 skills for a data scientist'")
    generate_button = gr.Button("Generate Job Listing", variant="primary")
    response_output = gr.Textbox(label="Generated Job Listing")

    generate_button.click(
        generate_job_listing,
        inputs=[query_input, workspace_dropdown, model_dropdown, file_upload],
        outputs=response_output,
    )

    gr.Markdown("<p style='text-align:center;color:purple;'>Created with ‚ù§Ô∏è for Job Listing Assistance</p>")

# Launch the Gradio app
demo.launch(share=True)

import gradio as gr
from transformers import pipeline

# Dummy model setup (replace this with your custom job listing GPT model logic)
model = pipeline("text-generation", model="gpt2")

# Function to process job-related queries
def generate_job_listing(query, workspace, model_name, file):
    if file:
        file_content = file.name  # File name as a placeholder (you can add file processing logic here)
    else:
        file_content = "No file uploaded."

    # Generate response using the model (replace with your custom logic)
    response = model(query, max_length=100, num_return_sequences=1)[0]["generated_text"]
    return f"Workspace: {workspace}\nModel: {model_name}\nUploaded File: {file_content}\n\nResponse: {response}"

# Gradio app layout
with gr.Blocks(css="""
    body {
        background: linear-gradient(to bottom, #1e3c72, #2a5298, #6b60a1, #5d4e8c);
        color: white;
        font-family: 'Arial', sans-serif;
    }
    .gradio-container {
        background: transparent;
        box-shadow: none;
    }
    .gr-button {
        background: linear-gradient(45deg, #6a3093, #a044ff);
        color: white;
        font-weight: bold;
    }
    .gr-button:hover {
        background: linear-gradient(45deg, #a044ff, #6a3093);
        color: white;
    }
    .gr-textbox, .gr-dropdown {
        border-radius: 10px;
        border: 1px solid #8a84e2;
    }
    h1 {
        text-align: center;
        font-size: 3rem;
        margin-bottom: 0.5rem;
        color: #d1c4f2;
        text-shadow: 0 0 10px #6a3093, 0 0 20px #a044ff;
    }
    p {
        text-align: center;
        font-size: 1rem;
        margin-top: 2rem;
        color: #ffffff;
    }
""") as demo:
    gr.Markdown("<h1>‚ú® Galaxy Job Listing Assistant GPT ‚ú®</h1>")
    gr.Markdown("This assistant helps generate and refine job listings with stunning galaxy vibes üåå.")

    with gr.Row():
        model_dropdown = gr.Dropdown(
            ["Job-GPT-1", "Llama-2", "CustomGPT"], label="Choose AI Model", interactive=True
        )
        workspace_dropdown = gr.Dropdown(
            ["Default", "Tech Jobs", "Healthcare Jobs"], label="Select Workspace", interactive=True
        )
        workspace_input = gr.Textbox(label="Create New Workspace (Optional)", placeholder="Enter new workspace name")

    file_upload = gr.File(label="Upload Job Description (optional):", type="filepath")
    query_input = gr.Textbox(label="Enter Job Query", placeholder="E.g., 'List top 5 skills for a data scientist'")
    generate_button = gr.Button("Generate Job Listing", variant="primary")
    response_output = gr.Textbox(label="Generated Job Listing")

    generate_button.click(
        generate_job_listing,
        inputs=[query_input, workspace_dropdown, model_dropdown, file_upload],
        outputs=response_output,
    )

    gr.Markdown("<p>üåü Created with passion to assist job seekers and employers worldwide üåü</p>")

# Launch the Gradio app
demo.launch(share=True)

import gradio as gr
from transformers import pipeline

# Dummy model setup (replace this with your custom job listing GPT model logic)
model = pipeline("text-generation", model="gpt2")

# Function to process job-related queries
def generate_job_listing(query, workspace, model_name, file):
    if file:
        file_content = file.name  # File name as a placeholder (you can add file processing logic here)
    else:
        file_content = "No file uploaded."

    # Generate response using the model (replace with your custom logic)
    response = model(query, max_length=100, num_return_sequences=1)[0]["generated_text"]
    return f"Workspace: {workspace}\nModel: {model_name}\nUploaded File: {file_content}\n\nResponse: {response}"

# Gradio app layout
with gr.Blocks(css="""
    body {
        background: url('https://example.com/galaxy-background.jpg') no-repeat center center fixed;
        background-size: cover;
        color: white;
        font-family: 'Arial', sans-serif;
    }
    .gradio-container {
        background: rgba(0, 0, 0, 0.7);
        border-radius: 15px;
        box-shadow: 0 0 20px rgba(255, 255, 255, 0.2);
        padding: 20px;
    }
    .gr-button {
        background: linear-gradient(45deg, #6a3093, #a044ff);
        color: white;
        font-weight: bold;
        border-radius: 10px;
        transition: transform 0.2s;
    }
    .gr-button:hover {
        background: linear-gradient(45deg, #a044ff, #6a3093);
        color: white;
        transform: scale(1.05);
    }
    .gr-textbox, .gr-dropdown {
        border-radius: 10px;
        border: 1px solid #8a84e2;
        background-color: rgba(255, 255, 255, 0.1);
        color: white;
    }
    h1 {
        text-align: center;
        font-size: 3rem;
        margin-bottom: 0.5rem;
        color: #d1c4f2;
        text-shadow: 0 0 10px #6a3093, 0 0 20px #a044ff;
    }
    p {
        text-align: center;
        font-size: 1rem;
        margin-top: 2rem;
        color: #ffffff;
    }
""") as demo:
    gr.Markdown("<h1>‚ú® Galaxy Job Listing Assistant GPT ‚ú®</h1>")
    gr.Markdown("This assistant helps generate and refine job listings with stunning galaxy vibes üåå.")

    with gr.Row():
        model_dropdown = gr.Dropdown(
            ["Job-GPT-1", "Llama-2", "CustomGPT"], label="Choose AI Model", interactive=True
        )
        workspace_dropdown = gr.Dropdown(
            ["Default", "Tech Jobs", "Healthcare Jobs"], label="Select Workspace", interactive=True
        )
        workspace_input = gr.Textbox(label="Create New Workspace (Optional)", placeholder="Enter new workspace name")

    file_upload = gr.File(label="Upload Job Description (optional):", type="filepath")
    query_input = gr.Textbox(label="Enter Job Query", placeholder="E.g., 'List top 5 skills for a data scientist'")

    generate_button = gr.Button("Generate Job Listing", variant="primary")

    response_output = gr.Textbox(label="Generated Job Listing")

    generate_button.click(
        generate_job_listing,
        inputs=[query_input, workspace_dropdown, model_dropdown, file_upload],
        outputs=response_output,
    )

    gr.Markdown("<p>üåü Created with passion to assist job seekers and employers worldwide üåü</p>")

# Launch the Gradio app
demo.launch(share=True)

import gradio as gr
from transformers import pipeline

# Dummy model setup (replace this with your custom job listing GPT model logic)
model = pipeline("text-generation", model="gpt2")

# Function to process job-related queries
def generate_job_listing(query, workspace, model_name, file):
    if file:
        file_content = file.name  # File name as a placeholder (you can add file processing logic here)
    else:
        file_content = "No file uploaded."

    # Generate response using the model (replace with your custom logic)
    response = model(query, max_length=100, num_return_sequences=1)[0]["generated_text"]
    return f"Workspace: {workspace}\nModel: {model_name}\nUploaded File: {file_content}\n\nResponse: {response}"

# Gradio app layout
with gr.Blocks(css="""
    body {
        background: url('https://example.com/galaxy-background.jpg') no-repeat center center fixed;
        background-size: cover;
        color: white;
        font-family: 'Arial', sans-serif;
    }
    .gradio-container {
        background: rgba(0, 0, 0, 0.7);
        border-radius: 15px;
        box-shadow: 0 0 20px rgba(255, 255, 255, 0.2);
        padding: 20px;
    }
    .gr-button {
        background: linear-gradient(45deg, #ff6a00, #ee0979);
        color: white;
        font-weight: bold;
        border-radius: 10px;
        transition: transform 0.2s;
        margin: 5px;
    }
    .gr-button:hover {
        transform: scale(1.05);
    }
    .gr-textbox, .gr-dropdown {
        border-radius: 10px;
        border: 1px solid #8a84e2;
        background-color: rgba(255, 255, 255, 0.1);
        color: white;
    }
    h1 {
        text-align: center;
        font-size: 3rem;
        margin-bottom: 0.5rem;
        color: #d1c4f2;
        text-shadow: 0 0 10px #6a3093, 0 0 20px #a044ff;
    }
    p {
        text-align: center;
        font-size: 1rem;
        margin-top: 2rem;
        color: #ffffff;
    }
""") as demo:

    gr.Markdown("<h1>Galaxy Job Listing Assistant GPT</h1>")
    gr.Markdown("This assistant helps generate and refine job listings with stunning galaxy vibes üåå.")

    with gr.Row():

        model_dropdown = gr.Dropdown(
            ["Job-GPT-1", "Llama-2", "CustomGPT"], label="Choose AI Model", interactive=True
        )

        workspace_dropdown = gr.Dropdown(
            ["Default", "Tech Jobs", "Healthcare Jobs"], label="Select Workspace", interactive=True
        )

        workspace_input = gr.Textbox(label="Create New Workspace (Optional)", placeholder="Enter new workspace name")

    file_upload = gr.File(label="Upload Job Description (optional):", type="filepath")

    query_input = gr.Textbox(label="Enter Job Query", placeholder="E.g., 'List top 5 skills for a data scientist'")

    generate_button = gr.Button("Generate Job Listing", variant="primary")

    response_output = gr.Textbox(label="Generated Job Listing")

    generate_button.click(
        generate_job_listing,
        inputs=[query_input, workspace_dropdown, model_dropdown, file_upload],
        outputs=response_output,
    )

    # Additional components
    with gr.Row():

        discover_button = gr.Button("Discover Jobs", variant="secondary")

        career_counseling_button = gr.Button("Career Counseling", variant="secondary")

        make_cv_button = gr.Button("Make CV for Job", variant="secondary")

        application_button = gr.Button("Application for Job", variant="secondary")

    discover_button.click(lambda: "Discovering jobs...", outputs=response_output)

    career_counseling_button.click(lambda: "Providing career counseling...", outputs=response_output)

    make_cv_button.click(lambda: "Creating CV...", outputs=response_output)

    application_button.click(lambda: "Applying for job...", outputs=response_output)

    gr.Markdown("<p>üåü Created with passion to assist job seekers and employers worldwide üåü</p>")

# Launch the Gradio app
demo.launch(share=True)

!pip install streamlit
!pip show streamlit


import streamlit as st
from transformers import pipeline

# Dummy model setup (replace with your custom job listing GPT logic)
model = pipeline("text-generation", model="gpt2")

# Set up the page with a galaxy-themed background
st.set_page_config(
    page_title="Galaxy Job Listing Assistant",
    page_icon="‚ú®",
    layout="centered"
)

# Apply custom background using CSS
st.markdown(
    """
    <style>
    body {
        background: linear-gradient(to bottom, #1e3c72, #2a5298, #6b60a1, #5d4e8c);
        color: white;
        font-family: 'Arial', sans-serif;
    }
    .stButton>button {
        background-color: #6a3093;
        color: white;
        font-size: 16px;
        font-weight: bold;
        border: 2px solid white;
        border-radius: 10px;
        padding: 10px 20px;
        transition: 0.3s;
    }
    .stButton>button:hover {
        background-color: #a044ff;
        border-color: #d4b3ff;
    }
    .stTextInput>div>div>input, .stSelectbox>div>div>input {
        background-color: #2a5298;
        color: white;
        border: 2px solid #8a84e2;
        border-radius: 10px;
    }
    h1 {
        color: #d1c4f2;
        text-align: center;
        text-shadow: 0 0 10px #6a3093, 0 0 20px #a044ff;
        font-size: 3rem;
    }
    p {
        text-align: center;
        font-size: 1.2rem;
        margin-top: 10px;
        color: #ffffff;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Page title
st.markdown("<h1>‚ú® Galaxy Job Listing Assistant GPT ‚ú®</h1>", unsafe_allow_html=True)
st.markdown(
    "<p>Generate job listings, analyze job descriptions, and explore insights with a touch of galaxy magic üåå.</p>",
    unsafe_allow_html=True,
)

# Dropdown for selecting the model
model_name = st.selectbox(
    "Choose an AI Model",
    ["Job-GPT-1", "Llama-2", "CustomGPT"],
    key="model"
)

# Dropdown for workspace selection
workspace = st.selectbox(
    "Select Workspace",
    ["Default", "Tech Jobs", "Healthcare Jobs"],
    key="workspace"
)

# Text input for creating a new workspace
new_workspace = st.text_input(
    "Create New Workspace (Optional)",
    placeholder="Enter new workspace name",
    key="new_workspace"
)

# File uploader for job description files
uploaded_file = st.file_uploader(
    "Upload a Job Description (Optional):",
    type=["txt", "pdf", "docx"],
    key="file_uploader"
)

# Text area for entering job-related queries
job_query = st.text_area(
    "Enter Job Query",
    placeholder="E.g., 'Generate a job description for a software engineer'",
    key="query"
)

# Generate button
if st.button("Generate Job Listing"):
    # Process the query
    if uploaded_file:
        file_name = uploaded_file.name
    else:
        file_name = "No file uploaded."

    # Dummy response (replace with your custom GPT logic)
    response = model(job_query, max_length=100, num_return_sequences=1)[0]["generated_text"]

    # Display the output
    st.markdown("### Generated Job Listing:")
    st.text_area("Output:", f"Workspace: {workspace}\nModel: {model_name}\nUploaded File: {file_name}\n\nResponse: {response}", height=300)

# Footer
st.markdown("<p>üåü Created with ‚ù§Ô∏è to assist job seekers and employers worldwide üåü</p>", unsafe_allow_html=True)

streamlit/usr/local/lib/python3.10/dist-packages/colab_kernel_launcher.py